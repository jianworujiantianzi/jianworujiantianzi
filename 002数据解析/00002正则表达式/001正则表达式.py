"""
OSCHINA  语言的使用
"""
"""
Regular Expression,正则表达式,一种使用表达式的方式对字符串进行匹配的语法规则

我们抓取到的网页源代码本质上就是一个超长的字符串 想从里面提取内容用正则再合适不过了

正则的优点: 速度快,效率高准确性高
正则的缺点:新手上手难度有点儿高

不过只要掌握了正则编写的逻辑关系，写出一个提取页面内容的正则其实并不复杂
正则的语法: 使用元字符进行排列组合用来匹配字符串 在线测试正则表达式https:/tool.oschina.net/regex

元字符: 具有固定含义的特殊符号常用元字符:
注意   一个元字符匹配的是一位的数据
        几位数据就是第几个位的时候换行
常用元字符：
.             匹配除换行符以外的任意字符
    未来再python的re模块是个坑 应为不能匹配换行
\w            匹配字母或数字或下划线
\s            匹配任意的空白符
\d            匹配数字
\n            匹配一个换行符
\t            匹配一个制表符
^             匹配字符串的开始
$             匹配字符串的结尾


这里面的大写的和小写的刚好意思相反
\W        匹配非字母或数字或下划线
\D          匹配非数字
\S          匹配非空白符


a|b         匹配字符a或字符b
()          匹配括号内的表达式，也表示一个组
[...]       匹配字符组中的字符
[^...]匹配除了字符组中字符的所有字符


量词
作用，控制前面元字符出现的次数

*           重复零次或更多次
+           重复一次或更多次
?           重复零次或一次

{n}         重复n次   #里面写重复多少次
{n,}        重复n次或更多次
{n,m}       重复n到m次

贪婪匹配和堕落匹配
.*          贪婪匹配   尽可能多的匹配
    从开头直接找到结尾
*？          惰性匹配    尽可能少的进行匹配       重点记忆:以后常用
    先从前面找到后面然后再往回找用专业用语就是回溯

"""