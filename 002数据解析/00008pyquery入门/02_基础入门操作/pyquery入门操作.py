from pyquery import PyQuery
html = """
    <ul>
      <li class="aaa"><a href="http://www.google.com">谷歌</a></li>
      <li class="aaa"><a href="http://www.baidu.com">百度</a></li>
      <li class="bbb" id="qq"><a href="http://www.qq.com">腾讯</a></li>
      <li class="bbb"><a href="http://www.yuanlai.com">原来</a></li>
    </ul>
"""
p = PyQuery(html)
"""
需求1.
    来找百度和谷歌的那一行
思考
    百度和谷歌的class的值都是一样的刚好可以利用这一点把他们找出来
操作
    利用类选择器.来查找属性
    就如下面的那一行代码把所有属性为aaa的那一类属性的全部都打印出来
"""
a = p(".aaa")   #使用的选择器.属性选择器
print(a)
"""
需求1的更深的一层
    再需求1的基础上只要里面的a标签
思考
    想办法再把li标签的后代给找到
操作
    利用后代选择器空格来指定后代标签快速的找到
"""
a1 = p(".aaa a")   #使用的选择器 空格再aaa后面怕看不到提醒一下
print(a1)
"""
需求2.
    只要里面的腾讯的标签
思考
    腾讯那里面有一个id是唯一的就刚好利用id的这一个特性来选择
操作
    利用id选择器#来找到ld对应的值的标签
"""
a2 = p("#qq")
print(a2)
"""
需求2深层
    只要里面的a标签
思考 和上面1的深层的那个一样加一个后代选择器
操作  和1深层也一样加一个后代选择器
"""
a3 = p("#qq a")
"""
需求3:
    只要腾讯的属性值也就是href后面的内容
操作方式如下
    利用.attr("这里面放属性")就可以在里面添加属性并拿到里面的属性
"""
a4 = p("#qq a").attr("href")
print(a4)
"""
需求4.
    拿到腾讯的那一行代码的文本
操作
    先找到文本所在的标签然后再后面加上.text()就可以找到文本
"""
a5 = p("#qq a").text()
print(a5)
"""
接下来要建立一个坑,这个坑很烦人
比如说提一个需求
需求5.
    我想找li里面所有href的值
思考
    我们要找href的值我们就要先找a标签然后再a标签里面添加属性即就像下面的a6一样直接p("li a").attr("href")
    这样子找但是，这样子找只能找到第一项因为这里面有一个坑，这个坑就是如果多个标签同时拿属性只能拿到第一个
思考解决
    因为上面的思考只能拿到第一个但是我们都想要那么我们就要把这个变成一个生成器(迭代器) 
    变成迭代器的方法如下面的a7操作在后面加上一个.items()就可以把在这个变成一个迭代器
    我们可以用type来查看类形可以发现这是一个生成器(迭代器)类形   
"""
a6 = p("li a").attr("href")
print(a6)
#变成迭代器
a7 = p("li a").items()
print(type(a7))
"""
需求5延续:
    从迭代器里面把东西都拿出来
思考
    因为这是一个迭代器所以我们在里面拿东西的时候就需要用循环的方式去拿具体的操作如下
"""
print("-"*50)
for item in a7:
    print(item)
"""
需求5再延续
    通过上面的操作我们可以把迭代器里面的东西给拿出来但是我们要的是里面的href属性想要往里面再拿href属性的话
    就看下面的操作就可如果想拿文本的话还可以在后面加上文本
在这里面拿到的东西就是字符串了也就是解坑了
"""
print("-"*50)
a8 = p("li a").items()
for item1 in a8:
    href = item1.attr("href")
    print(href)
    text = item1.text()
    print(text)
"""
快速总结
1.pyquery('里面放的是选择器')
2..items()当选择器内容很多的时候需要一个一个处理的时候
3..attr('这里面放属性名')   获取属性信息
4..text()获取文本   只要文本所有的html标签被过滤掉       
"""
"""
一个小补充
"""
div = """
    <div><span>见我如见天子</span></div>
"""
tanzi = PyQuery(div)
"""
.html拿到标签里面夹带的所有内容
    如果找的标签是span标签的话那么跟.text()拿到的内容是一样的
    不一样的是.html拿到的是这个标签里面全部的内容
    一般情况下.text用的比较多 毕竟只要里的内容就可
    
"""
html_quanbu = tanzi("div").html()
print(html_quanbu)

"""
下一节还会有一个小小的进阶这个进阶是所有的其他模块都不具备的
它这个玩意不光能够提取东西它还能反过来改变你HTML的结构能够直接操纵HTML
"""





