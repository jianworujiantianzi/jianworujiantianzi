"""
笔记
int  将其他形转换成整形
float  将其他形转换成浮点型
str  将其他形转换成字符串
bool  将其他型转换成布尔类型
（表示空意义的将被转换成False，其它类型将被转换成True）
type  获取一个数据的类型
None空值表示什么都没有
\n=  换行
\t  相当于4个空格用于隔开一段话
r   取消转意
\\  也有取消转意的意思（双重转意等于不转意）
[ ]   列表      缩影


append是属于python中的一个函数,它主要是用来在列表末尾添加新的对象。语法格式为list.append(obj)。参数:list:列表对象;obj:添加到列表末尾的对象。
radom.randint() 是Python 标准库中的一个函数,用于生成指定范围内的随机整数。它接受两个参数,第一个参数是范围内的最小整数,第二个参数是范围内的最大整数,包括这两个整数在内。
元组tupler（）是不允许修改的除非元组里面包含可变类型的数据
元组（）里面东西不可变
通过键访问字典
dict()创建字典键是唯一的值不唯一
keyrror是报错异常
or或者
lower    strip    容错处理
字典可通过update()方法或指定的键添加元素，也可以修改元素

pop（）方法可以根据指定的键删除字典中的指定元素，若删除成功
popitem（）方法可以根据指定的键删除字典中的指定元素，若删除成功则返回目标元素

python中，使用关键字def定义函数
具体使用方法如下
def 函数名（[参数列表]）:
        [“函数文档字符串”]
        函数体
        [return 语句]
所有的函数名后面必须有:

内部变量只能再函数内部使用
global可以声明改变程序，不建议使用
运算符
   +就是+   -就是-  *乘法   /除法
//也是除法但是只保留整数部分  **获取幂次方
赋值运算符
赋值运算符（=）：用于将右侧的值赋给左侧的变量。
加等于运算符（+=）：将右侧的值加到左侧的变量上，然后将结果赋给左侧的变量。
减等于运算符（-=）：将左侧的变量减去右侧的值，然后将结果赋给左侧的变量。
乘等于运算符（*=）：将左侧的变量乘以右侧的值，然后将结果赋给左侧的变量。
除等于运算符（/=）：将左侧的变量除以右侧的值，然后将结果赋给左侧的变量。
取余等于运算符（%=）：将左侧的变量对右侧的值取余，然后将结果赋给左侧的变量。
幂等于运算符（**=）：将左侧的变量对右侧的值进行幂运算，然后将结果赋给左侧的变量。简单的来说
c+=a 等效与c=c-a
c-=a等效与c=c-a
c*=a等效与c=c*a
c/=a等效与c=c/a
c%=a等效与c=c%a
c**=a等效与c=c**a
c//=a等效与c=c//a

关系运算符（比较两个变量之间的关系，运行结果是布尔值）
关系运算符有（>）（<）（==）（>=）（<=）［（！=）这个是不等于的意思］
这些运算符运算后满足则输出的结果为
True不满足则为False
这些关系运算符通常运用在数字上比较多，而（==）和（！=）有时也会运用再字符串上来对比字符串是否相等
逻辑运算符
and与 or或not非
and：当两边都为真时才是真，且返回’and’后边的内容；当两边都为假时返回’and’前面的内容；当一真一假时返回代表假的内容。
or：当有一个为真时即是真，且返回代表真的内容；当两边都为假时返回’or’后面面的内容；当两边都为真时返回’or’前面的内容。
not :用于对一个条件或表达式进行取反操作。如果 not 运算符后面的条件或表达式为 True，则 not 返回 False；如果后面的条件或表达式为 False，则 not 返回 True。
列表（list）［］
列表是一个有序的数列结构可以存放不同类型的数据
列表每个元素都有索引
列表可以进行一系列操作，添加，删除，修改元素
注意:不同的数据之间需要用一个英文的,做分隔符列表的特性1.有序2.元素可重复3.可存放多种数据类型
列表中的元素排序正序从0开始倒叙从-1开始
列表可以切片用（:）从:前面的开始到:后面结束它们直接的数据都被截取
注如果只有开始索引没有结束索引的话就会重开一直截取截取到最后一个元素。相反如果:前面没有索引后面有索引那么就是从开始截取到:后面那个终止的那个索引
步长列  list=[a,b,c,d,e,f,g,h,]
             print（list［0:6:2］）就相当于从第0个元素开始截到第6个元素每隔两个元素截取一个
给列表增加元素方法
列1，用.append（注点）（注只能在末尾添加）
list1=［1,2,3,4,］（给列表1中添加元素5）
list1.append（5）这样子就可以直接再末尾添加元素（5）了
列2，用.insert（在指定位置添加）
list2=［"张三","李四","王五"］（再李四后面添加赵六
list2.linsert（1，"赵六"）
删除数据
列1，用.remove删除王五
.remove用于删除具体值的数据
list1=［"张三","李四","王五"］
list1.remove（"王五"）
print（列表1）
list2，用.pop删除王五
.pop用于删除指定位置的值
list2=［"张三","李四","王五"］
list2.pop（2）
print（列表2）
重新赋值
示列
list1=［"张三","李四","王五"］         把张三改成赵六
list［0］="赵六"
元组（tuple）（）
元组是一个有序的结构基本结构跟列表类似
元组也能用索引获取元素的值
和列表不一样的是，元组中的元素不支持修改
字典（dict）
字典是一种键值对结构的序列结构，其中
键（key）和值（value）是一一对应的
 字典中的键是不可重复的，一般使用字符串作为键
字典用在需要高速查找的地方
示例 创建一个字典
dict={“张”："张恩瑞","见":"见我如见天子"}
             |              |
           键           值          一一对应
使用方法     示例
print（dict［"张"］）
然后就会直接输出张这个键对应的值 见我如见天子了
修改字典值的方法
把"见"对应的值"见我如见天子"修改成"我就是天子"
dict［"见"］="我就是天子"
print（"见"）   就会输出我就是天子
增加字典数据的方法
示例1直接再dict字典后面添加键"新"对应的值为"新加的一个数据"
dict["新"]="新建的一个数据"
删除字典中的数据
把dict里面的张给删掉
dict.pop（"张"）         #这样子就删掉了
判断一个键是否存在
示例，判断"见"是否再dict里面
方法print（"见" in  dict）
#如果存在则输出的结果为True如果不存在则输出False
集合（set）
集合是一种无须的序列结构，集合中的元素不重复
集合经常被用来进行去重复值
集合也可以进行数学集合运算如，并，交，差以及对称差等等
集合通俗的来说就是一个只有键没有值的字典
集合给列表去重方法示例
list=［22,22,13,16,32,51,13］
seta=set（list）#调用set函数
print（seta）#输出的结果就会吧重复的值给去处
seta（）#将其他序列转换成seta
list（）#将其他序列转换成list
注不是所有的都能转只有结构类似的时候才能转换
集合运算
示例:将a={1,2,3,4,5,6}和b={4,5,6,7,8,9}这两个集合中重复的元素列出来
a={1,2,3,4,5,6}
b={4,5,6,7,8,9}
print（a&b）#&这个是获取交集的符号
这样子就可以直接吧他们都交集给打印出来
2.   求上面两个集合的并集
     print（a|b）#|这个就是获取并集的符号
     这样子a和b的并集就全都给打印出来了
3.   获取差集
      print（a-b）
     这样子就可以把a中有的b中没有的给打印出来
函数（len）


代码的执行方法
顺序结构，#代码逐行执行每行代码执一次
选择结构（分支结构，判断结构）#通过条件判断那些代码执行那些代码不执行
循环结构#代码重复执行
"""